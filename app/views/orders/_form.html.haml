%script{ src: "https://js.stripe.com/v3/" }

=render 'orders/item_list', order: @order

%h4 配送先の情報

= simple_form_for @order, html: { class: 'form-horizontal', id: "payment-form" }  do |f|
  = f.error_notification
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?

  = f.input :merchant_id, as: :hidden, value: @merchant_id
  = f.input :address
  = f.input :ship_time, as: :select,
    collection: ShipTime.range,
    selected: ShipTime.range.first
  = f.input :ship_date, as: :select,
    collection: Order.business_days,
    selected: Order.business_days.first.second,
    label_method: :second,
    value_method: :first

  = f.input :purchased_type, as: :radio_buttons, id: 'purchased_type'

  - if @order.user.has_customer_id?
    .form-row
      = check_box_tag(:use_registered_card)
      = label_tag(:use_registered_card, "以前と同じカードで支払う")

    .form-row
      = f.hidden_field :use_registered_id, value: 0
  .form-row
    %label{ for:"card-element" }
      クレジット・デビットカード番号
    #card-element.mt-1{ style: 'width: 500px' }
    #card-errors{ role: "alert" }

  = f.input :user_point,
            label: "ポイントを利用する（つかえるポイント: #{@order.user.point}）",
            readonly: @order.user.point == 0,
            input_html: { min: 0, max: @order.user.point}
  %p
    %button.mt-1{class:"btn btn-success", id: 'btn_stripe_card'} 購入を確定する


:javascript
  var stripe = Stripe('#{Rails.configuration.stripe[:publishable_key]}', {locale: 'ja'});
  var elements = stripe.elements();
  var style = {
    base: {
      color: '#32325d',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  };
  var card = elements.create('card', {style: style, hidePostalCode: true});
  card.mount('#card-element');

  card.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  });

  var form = document.getElementById('payment-form');
  let handleCardValidation = function(event) {
    event.preventDefault();

    if (skip_card_validation()){
      var form = document.getElementById('payment-form');
      form.submit();
      return
    }

    stripe.createToken(card).then(function(result) {
      if (result.error) {
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
      } else {
        stripeTokenHandler(result.token);
      }
    });
  }
  form.addEventListener('submit', handleCardValidation);

  function stripeTokenHandler(token) {
    var form = document.getElementById('payment-form');
    var hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'stripeToken');
    hiddenInput.setAttribute('value', token.id);
    form.appendChild(hiddenInput);

    form.submit();
  }

  function skip_card_validation() {
    var radio_cash_on_delivery = document.getElementById('order_purchased_type_cash_on_delivery');
    if(radio_cash_on_delivery  && radio_cash_on_delivery.checked)
      return true

    var radio_use_registered_card = document.getElementById('use_registered_card');

    if(radio_use_registered_card  && radio_use_registered_card.checked)
      return true
  }

